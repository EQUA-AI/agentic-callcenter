name: Azure Consolidated Deployment

on:
  workflow_dispatch:

# Using federated credentials (user-assigned managed identity) authentication
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    # azd built-in secrets for federated authentication - match original deployment
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
      # OpenAI configuration (shared with original deployment)
      OPENAI_NAME: ${{ secrets.OPENAI_NAME }}
      OPENAI_RESOURCE_GROUP_NAME: ${{ secrets.OPENAI_RESOURCE_GROUP_NAME }}
      EMAIL_RECIPIENT_ADDRESS: ${{ secrets.EMAIL_RECIPIENT_ADDRESS }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # using the install-azd action
      - name: Install azd
        uses: Azure/setup-azd@v2.1.0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Upgrade pip to latest version to avoid warnings
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
        shell: bash

      # Login with federated credentials (managed identity)
      - name: Log in with Azure (Federated Credentials)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Configure azd to use federated credentials from GitHub Actions
      - name: Configure azd for federated credentials
        run: |
          azd config set auth.useAzCliAuth true
        shell: bash

      # Create .env file for azd parameters - match original deployment pattern
      - name: Create .env file for consolidated azd deployment
        run: |
          cat > .env << EOF
          AZURE_ENV_NAME=${{ secrets.AZURE_ENV_NAME }}
          AZURE_LOCATION=${{ secrets.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_PRINCIPAL_ID=${{ secrets.AZURE_PRINCIPAL_ID }}
          AZURE_OPENAI_NAME=${{ secrets.OPENAI_NAME }}
          AZURE_OPENAI_RG=${{ secrets.OPENAI_RESOURCE_GROUP_NAME }}
          EMAIL_RECIPIENT_ADDRESS=${{ secrets.EMAIL_RECIPIENT_ADDRESS }}
          GITHUB_ACTIONS=true
          EOF
        shell: bash

      # Get existing resource information
      - name: Get existing resource information
        run: |
          # Get resource information from existing deployment
          RG_NAME="rg-${{ secrets.AZURE_ENV_NAME }}"
          
          # Get Application Insights connection string
          APPINSIGHTS_CONN=$(az monitor app-insights component show --app dev-appin-2wfnxagc7mn5g --resource-group $RG_NAME --query "connectionString" --output tsv)
          echo "APPINSIGHTS_CONNECTION_STRING=$APPINSIGHTS_CONN" >> $GITHUB_ENV
          
          # Get User Assigned Identity client ID
          UAMI_CLIENT_ID=$(az identity show --name devuami2wfnxagc7mn5g --resource-group $RG_NAME --query "clientId" --output tsv)
          echo "UAMI_CLIENT_ID=$UAMI_CLIENT_ID" >> $GITHUB_ENV
          
          # Get Cognitive Services key
          SPEECH_KEY=$(az cognitiveservices account keys list --name dev-cogsvc-2wfnxagc7mn5g --resource-group $RG_NAME --query "key1" --output tsv)
          echo "SPEECH_KEY=$SPEECH_KEY" >> $GITHUB_ENV
          
          echo "Retrieved resource information successfully"
        shell: bash

      # Build and push container images
      - name: Build and push consolidated container images
        run: |
          RG_NAME="rg-${{ secrets.AZURE_ENV_NAME }}"
          ACR_NAME="devacr2wfnxagc7mn5g"
          
          # Login to ACR
          az acr login --name $ACR_NAME
          
          # Build and push backend image (API + Functions) from root context
          echo "Building consolidated backend image..."
          docker build -f consolidated-backend/backend.dockerfile -t $ACR_NAME.azurecr.io/consolidated-backend:latest .
          docker push $ACR_NAME.azurecr.io/consolidated-backend:latest
          
          # Build and push frontend image (Voice + UI) from root context
          echo "Building consolidated frontend image..."
          docker build -f consolidated-frontend/frontend.dockerfile -t $ACR_NAME.azurecr.io/consolidated-frontend:latest .
          docker push $ACR_NAME.azurecr.io/consolidated-frontend:latest
          
          # Set image names for Bicep deployment
          echo "BACKEND_IMAGE=$ACR_NAME.azurecr.io/consolidated-backend:latest" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=$ACR_NAME.azurecr.io/consolidated-frontend:latest" >> $GITHUB_ENV
        shell: bash

      # Deploy using direct Azure CLI - consolidated deployment to existing environment
      - name: Provision Infrastructure and Deploy Consolidated Application
        run: |
          # Deploy consolidated containers to the existing environment
          az deployment sub create \
            --location ${{ secrets.AZURE_LOCATION }} \
            --template-file infra/main-consolidated.bicep \
            --parameters infra/main-consolidated.parameters.json \
            --parameters environmentName=${{ secrets.AZURE_ENV_NAME }} \
            --parameters location=${{ secrets.AZURE_LOCATION }} \
            --parameters resourceGroupName=rg-${{ secrets.AZURE_ENV_NAME }} \
            --parameters applicationInsightsConnectionString="$APPINSIGHTS_CONNECTION_STRING" \
            --parameters userAssignedIdentityClientId="$UAMI_CLIENT_ID" \
            --parameters speechServiceKey="$SPEECH_KEY" \
            --parameters backendContainerImage="$BACKEND_IMAGE" \
            --parameters frontendContainerImage="$FRONTEND_IMAGE" \
            --name "consolidated-deployment-$(date +%Y%m%d%H%M%S)"
        shell: bash
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Get deployment information
      - name: Get consolidated deployment URLs
        run: |
          echo "ðŸ“‹ Consolidated Deployment Information:"
          echo "Environment: ${{ secrets.AZURE_ENV_NAME }}"
          echo "Resource Group: rg-${{ secrets.AZURE_ENV_NAME }}"
          echo ""
          echo "ðŸ”— Application URLs:"
          echo ""
          echo "ðŸ“Š All Container Apps in Resource Group:"
          az containerapp list --resource-group "rg-${{ secrets.AZURE_ENV_NAME }}" --query "[].{Name:name,Status:properties.provisioningState,FQDN:properties.configuration.ingress.fqdn}" --output table || echo "Container apps will be listed after deployment"
        shell: bash

      # Deployment completion message
      - name: Deployment Summary
        run: |
          echo "âœ… Deployment completed successfully!"
          echo "Consolidated containers should now be running alongside the original containers."
          echo "Backend container: consolidated-backend"
          echo "Frontend container: consolidated-frontend"
        shell: bash
        if: always() # Always show summary, even if deployment fails