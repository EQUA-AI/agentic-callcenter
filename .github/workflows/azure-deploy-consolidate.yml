name: Azure Consolidated Deployment

on:
  workflow_dispatch:

# Using federated credentials (user-assigned managed identity) authentication
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    # azd built-in secrets for federated authentication - match original deployment
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
      # OpenAI configuration (shared with original deployment)
      OPENAI_NAME: ${{ secrets.OPENAI_NAME }}
      OPENAI_RESOURCE_GROUP_NAME: ${{ secrets.OPENAI_RESOURCE_GROUP_NAME }}
      EMAIL_RECIPIENT_ADDRESS: ${{ secrets.EMAIL_RECIPIENT_ADDRESS }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # using the install-azd action
      - name: Install azd
        uses: Azure/setup-azd@v2.1.0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Upgrade pip to latest version to avoid warnings
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
        shell: bash

      # Login with federated credentials (managed identity)
      - name: Log in with Azure (Federated Credentials)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Configure azd to use federated credentials from GitHub Actions
      - name: Configure azd for federated credentials
        run: |
          azd config set auth.useAzCliAuth true
        shell: bash

      # Create .env file for azd parameters - match original deployment pattern
      - name: Create .env file for consolidated azd deployment
        run: |
          cat > .env << EOF
          AZURE_ENV_NAME=${{ secrets.AZURE_ENV_NAME }}
          AZURE_LOCATION=${{ secrets.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_PRINCIPAL_ID=${{ secrets.AZURE_PRINCIPAL_ID }}
          AZURE_OPENAI_NAME=${{ secrets.OPENAI_NAME }}
          AZURE_OPENAI_RG=${{ secrets.OPENAI_RESOURCE_GROUP_NAME }}
          EMAIL_RECIPIENT_ADDRESS=${{ secrets.EMAIL_RECIPIENT_ADDRESS }}
          GITHUB_ACTIONS=true
          EOF
        shell: bash

      # Get existing resource information and setup multi-agent infrastructure
      - name: Get existing resource information for environment variables
        run: |
          # Get resource information from existing deployment for environment variables
          RG_NAME="rg-${{ secrets.AZURE_ENV_NAME }}"
          
          # Get Application Insights connection string
          APPINSIGHTS_CONN=$(az monitor app-insights component show --app dev-appin-2wfnxagc7mn5g --resource-group $RG_NAME --query "connectionString" --output tsv)
          echo "APPINSIGHTS_CONNECTION_STRING=$APPINSIGHTS_CONN" >> $GITHUB_ENV
          
          # Get User Assigned Identity client ID
          UAMI_CLIENT_ID=$(az identity show --name devuami2wfnxagc7mn5g --resource-group $RG_NAME --query "clientId" --output tsv)
          echo "UAMI_CLIENT_ID=$UAMI_CLIENT_ID" >> $GITHUB_ENV
          
          # Get Cognitive Services key (optional - skip if resource doesn't exist)
          SPEECH_KEY=$(az cognitiveservices account keys list --name dev-cogsvc-2wfnxagc7mn5g --resource-group $RG_NAME --query "key1" --output tsv 2>/dev/null || echo "")
          if [ -n "$SPEECH_KEY" ]; then
            echo "SPEECH_KEY=$SPEECH_KEY" >> $GITHUB_ENV
            echo "✅ Cognitive Services found and configured"
          else
            echo "⚠️  Cognitive Services not found - speech features will be disabled"
            echo "SPEECH_KEY=" >> $GITHUB_ENV
          fi
          
          echo "Environment variables configured for azd deployment"
        shell: bash

      # Deploy using azd - consolidated deployment with Bicep templates (like original azure-deploy.yml)
      - name: Provision Infrastructure and Deploy Consolidated Application
        run: |
          # Copy the consolidated azure.yaml to be the default one for this deployment
          cp azure-consolidated.yaml azure.yaml
          azd up --no-prompt
        shell: bash
        env:
          # Azure credentials for azd to use
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # Infrastructure parameters matching main-consolidated.parameters.json
          AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
          AZURE_PRINCIPAL_ID: ${{ secrets.AZURE_PRINCIPAL_ID }}
          AZURE_OPENAI_NAME: ${{ secrets.OPENAI_NAME }}
          AZURE_OPENAI_RG: ${{ secrets.OPENAI_RESOURCE_GROUP_NAME }}
          EMAIL_RECIPIENT_ADDRESS: ${{ secrets.EMAIL_RECIPIENT_ADDRESS }}
          GITHUB_ACTIONS: "true"
          # Enable OIDC authentication for azd
          ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
          ACTIONS_ID_TOKEN_REQUEST_URL: ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}
          # Additional environment variables for multi-agent and foundry support
          APPINSIGHTS_CONNECTION_STRING: ${{ env.APPINSIGHTS_CONNECTION_STRING }}
          UAMI_CLIENT_ID: ${{ env.UAMI_CLIENT_ID }}
          SPEECH_KEY: ${{ env.SPEECH_KEY }}

      # Get deployment information and verify setup
      - name: Get consolidated deployment URLs and verify setup
        run: |
          echo "📋 Consolidated Deployment Information:"
          echo "Environment: ${{ secrets.AZURE_ENV_NAME }}"
          echo "Resource Group: rg-${{ secrets.AZURE_ENV_NAME }}"
          echo ""
          echo "🔗 Application URLs:"
          echo ""
          echo "📊 Container Apps in Resource Group:"
          az containerapp list --resource-group "rg-${{ secrets.AZURE_ENV_NAME }}" --query "[].{Name:name,Status:properties.provisioningState,FQDN:properties.configuration.ingress.fqdn}" --output table
          
          echo ""
          echo "� Azure AI Foundry Integration:"
          echo "Foundry Endpoint: https://weddingomni.services.ai.azure.com/api/projects/WeddingOmni"
          echo "Agent ID: asst_LgflhAlTTQMvnDLJp4wmOFQr"
        shell: bash

      # Deployment completion message
      - name: Deployment Summary
        run: |
          echo "✅ Consolidated Deployment completed successfully using Azure Developer CLI (azd)!"
          echo ""
          echo "🎯 What was deployed:"
          echo "   • Consolidated backend with multi-agent routing support"
          echo "   • Chainlit frontend with Azure AI Foundry integration"
          echo "   • Docker containers built and deployed to Azure Container Apps"
          echo "   • Infrastructure provisioned using Bicep templates"
          echo ""
          echo "🔧 Next steps:"
          echo "   1. Access the Chainlit chat interface at: [Frontend URL]"
          echo "   2. Test the Azure AI Foundry agent integration"
          echo "   3. Configure additional WhatsApp Business numbers if needed"
          echo ""
          echo "📚 Documentation:"
          echo "   • Frontend setup: consolidated-frontend/README.md"
          echo "   • Backend setup: consolidated-backend/README.md"
        shell: bash
        if: always() # Always show summary, even if deployment fails