name: Azure Consolidated Deployment

on:
  workflow_dispatch:

# Using federated credentials (user-assigned managed identity) authentication
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    # azd built-in secrets for federated authentication - match original deployment
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
      # OpenAI configuration (shared with original deployment)
      OPENAI_NAME: ${{ secrets.OPENAI_NAME }}
      OPENAI_RESOURCE_GROUP_NAME: ${{ secrets.OPENAI_RESOURCE_GROUP_NAME }}
      EMAIL_RECIPIENT_ADDRESS: ${{ secrets.EMAIL_RECIPIENT_ADDRESS }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # using the install-azd action
      - name: Install azd
        uses: Azure/setup-azd@v2.1.0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Upgrade pip to latest version to avoid warnings
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
        shell: bash

      # Login with federated credentials (managed identity)
      - name: Log in with Azure (Federated Credentials)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Configure azd to use federated credentials from GitHub Actions
      - name: Configure azd for federated credentials
        run: |
          azd config set auth.useAzCliAuth true
        shell: bash

      # Create .env file for azd parameters - match original deployment pattern
      - name: Create .env file for consolidated azd deployment
        run: |
          cat > .env << EOF
          AZURE_ENV_NAME=${{ secrets.AZURE_ENV_NAME }}
          AZURE_LOCATION=${{ secrets.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_PRINCIPAL_ID=${{ secrets.AZURE_PRINCIPAL_ID }}
          AZURE_OPENAI_NAME=${{ secrets.OPENAI_NAME }}
          AZURE_OPENAI_RG=${{ secrets.OPENAI_RESOURCE_GROUP_NAME }}
          EMAIL_RECIPIENT_ADDRESS=${{ secrets.EMAIL_RECIPIENT_ADDRESS }}
          GITHUB_ACTIONS=true
          EOF
        shell: bash

      # Get existing resource information and setup multi-agent infrastructure
      - name: Get existing resource information and setup multi-agent infrastructure
        run: |
          # Get resource information from existing deployment
          RG_NAME="rg-${{ secrets.AZURE_ENV_NAME }}"
          
          # Get Application Insights connection string
          APPINSIGHTS_CONN=$(az monitor app-insights component show --app dev-appin-2wfnxagc7mn5g --resource-group $RG_NAME --query "connectionString" --output tsv)
          echo "APPINSIGHTS_CONNECTION_STRING=$APPINSIGHTS_CONN" >> $GITHUB_ENV
          
          # Get User Assigned Identity client ID
          UAMI_CLIENT_ID=$(az identity show --name devuami2wfnxagc7mn5g --resource-group $RG_NAME --query "clientId" --output tsv)
          echo "UAMI_CLIENT_ID=$UAMI_CLIENT_ID" >> $GITHUB_ENV
          
          # Get Cognitive Services key (optional - skip if resource doesn't exist)
          SPEECH_KEY=$(az cognitiveservices account keys list --name dev-cogsvc-2wfnxagc7mn5g --resource-group $RG_NAME --query "key1" --output tsv 2>/dev/null || echo "")
          if [ -n "$SPEECH_KEY" ]; then
            echo "SPEECH_KEY=$SPEECH_KEY" >> $GITHUB_ENV
            echo "✅ Cognitive Services found and configured"
          else
            echo "⚠️  Cognitive Services not found - speech features will be disabled"
            echo "SPEECH_KEY=" >> $GITHUB_ENV
          fi
          
          # Setup multi-agent Cosmos DB containers
          echo "Setting up multi-agent Cosmos DB containers..."
          COSMOS_ACCOUNT="devcosmos2wfnxagc7mn5g"
          DATABASE_NAME="telco-callcenter-agents"
          
          # Create agents container if it doesn't exist
          az cosmosdb sql container create \
            --account-name $COSMOS_ACCOUNT \
            --database-name $DATABASE_NAME \
            --name agents \
            --partition-key-path "/agent_id" \
            --resource-group $RG_NAME \
            --throughput 400 || echo "Agents container already exists"
          
          # Create channels container if it doesn't exist
          az cosmosdb sql container create \
            --account-name $COSMOS_ACCOUNT \
            --database-name $DATABASE_NAME \
            --name channels \
            --partition-key-path "/channel_id" \
            --resource-group $RG_NAME \
            --throughput 400 || echo "Channels container already exists"
          
          # Create agent_channel_mappings container if it doesn't exist
          az cosmosdb sql container create \
            --account-name $COSMOS_ACCOUNT \
            --database-name $DATABASE_NAME \
            --name agent_channel_mappings \
            --partition-key-path "/mapping_id" \
            --resource-group $RG_NAME \
            --throughput 400 || echo "Mappings container already exists"
          
          # Grant Cosmos DB Data Contributor role to managed identity for multi-agent containers
          UAMI_PRINCIPAL_ID=$(az identity show --name devuami2wfnxagc7mn5g --resource-group $RG_NAME --query "principalId" --output tsv)
          COSMOS_SCOPE="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RG_NAME/providers/Microsoft.DocumentDB/databaseAccounts/$COSMOS_ACCOUNT"
          
          az role assignment create \
            --assignee $UAMI_PRINCIPAL_ID \
            --role "00000000-0000-0000-0000-000000000002" \
            --scope $COSMOS_SCOPE || echo "Role assignment already exists"
          
          echo "Multi-agent infrastructure setup completed successfully"
        shell: bash

      # Build and push container images
      - name: Build and push consolidated container images
        run: |
          RG_NAME="rg-${{ secrets.AZURE_ENV_NAME }}"
          ACR_NAME="devacr2wfnxagc7mn5g"
          
          # Login to ACR
          az acr login --name $ACR_NAME
          
          # Build and push backend image (API + Functions) from root context
          echo "Building consolidated backend image..."
          docker build -f consolidated-backend/backend.dockerfile -t $ACR_NAME.azurecr.io/consolidated-backend:latest .
          docker push $ACR_NAME.azurecr.io/consolidated-backend:latest
          
          # Build and push frontend image (Chainlit + Azure AI Foundry) from root context
          echo "Building consolidated frontend image (Chainlit)..."
          docker build -f consolidated-frontend/frontend.dockerfile -t $ACR_NAME.azurecr.io/consolidated-frontend:latest .
          docker push $ACR_NAME.azurecr.io/consolidated-frontend:latest
          
          # Set image names for Bicep deployment
          echo "BACKEND_IMAGE=$ACR_NAME.azurecr.io/consolidated-backend:latest" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=$ACR_NAME.azurecr.io/consolidated-frontend:latest" >> $GITHUB_ENV
        shell: bash

      # Deploy using direct Azure CLI - consolidated deployment to existing environment with multi-agent support
      - name: Provision Infrastructure and Deploy Consolidated Application with Multi-Agent Support
        run: |
          # Deploy consolidated containers to the existing environment with multi-agent configuration
          # Use empty string for speechServiceKey if not available
          SPEECH_PARAM="${SPEECH_KEY:-}"
          
          az deployment sub create \
            --location ${{ secrets.AZURE_LOCATION }} \
            --template-file infra/main-consolidated.bicep \
            --parameters infra/main-consolidated.parameters.json \
            --parameters environmentName=${{ secrets.AZURE_ENV_NAME }} \
            --parameters location=${{ secrets.AZURE_LOCATION }} \
            --parameters resourceGroupName=rg-${{ secrets.AZURE_ENV_NAME }} \
            --parameters applicationInsightsConnectionString="$APPINSIGHTS_CONNECTION_STRING" \
            --parameters userAssignedIdentityClientId="$UAMI_CLIENT_ID" \
            --parameters speechServiceKey="$SPEECH_PARAM" \
            --parameters backendContainerImage="$BACKEND_IMAGE" \
            --parameters frontendContainerImage="$FRONTEND_IMAGE" \
            --parameters cosmosDbDatabaseName="telco-callcenter-agents" \
            --parameters multiAgentEnabled="true" \
            --parameters enableConfigUI="true" \
            --parameters foundryEndpoint="https://weddingomni.services.ai.azure.com/api/projects/WeddingOmni" \
            --parameters agentId="asst_LgflhAlTTQMvnDLJp4wmOFQr" \
            --parameters useFoundryAgent="true" \
            --parameters acsChannelRegistrationId="5b42b7cd-1bfe-4f94-acc9-7f46b19cb5ec" \
            --name "consolidated-deployment-$(date +%Y%m%d%H%M%S)"
        shell: bash
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Get deployment information and verify multi-agent setup
      - name: Get consolidated deployment URLs and verify multi-agent setup
        run: |
          echo "📋 Consolidated Deployment Information:"
          echo "Environment: ${{ secrets.AZURE_ENV_NAME }}"
          echo "Resource Group: rg-${{ secrets.AZURE_ENV_NAME }}"
          echo ""
          echo "🔗 Application URLs:"
          echo ""
          echo "📊 All Container Apps in Resource Group:"
          az containerapp list --resource-group "rg-${{ secrets.AZURE_ENV_NAME }}" --query "[].{Name:name,Status:properties.provisioningState,FQDN:properties.configuration.ingress.fqdn}" --output table || echo "Container apps will be listed after deployment"
          
          echo ""
          echo "🗄️ Verifying Multi-Agent Cosmos DB Setup:"
          COSMOS_ACCOUNT="devcosmos2wfnxagc7mn5g"
          DATABASE_NAME="telco-callcenter-agents"
          RG_NAME="rg-${{ secrets.AZURE_ENV_NAME }}"
          
          # List containers in the multi-agent database
          echo "Containers in $DATABASE_NAME database:"
          az cosmosdb sql container list \
            --account-name $COSMOS_ACCOUNT \
            --database-name $DATABASE_NAME \
            --resource-group $RG_NAME \
            --query "[].{Name:name,PartitionKey:resource.partitionKey.paths[0]}" \
            --output table || echo "Database containers will be listed after creation"
          
          echo ""
          echo "🔧 Multi-Agent Configuration UI should be available at:"
          echo "Backend URL/config - for agent and channel management"
        shell: bash

      # Deployment completion message
      - name: Deployment Summary
        run: |
          echo "✅ Multi-Agent Deployment completed successfully!"
          echo ""
          echo "🎯 What was deployed:"
          echo "   • Consolidated backend with multi-agent routing support"
          echo "   • Chainlit frontend with Azure AI Foundry integration"
          echo "   • Configuration UI for managing agents and channels"
          echo "   • Cosmos DB containers for multi-agent configuration"
          echo "   • RBAC permissions for managed identity access"
          echo ""
          echo "🔧 Next steps:"
          echo "   1. Access the Chainlit chat interface at: [Frontend URL]"
          echo "   2. Access the configuration UI at: [Backend URL]/config"
          echo "   3. Add your WhatsApp Business numbers as channels"
          echo "   4. Configure AI agents for each channel"
          echo "   5. Test the multi-agent routing functionality"
          echo ""
          echo "📚 Documentation:"
          echo "   • Multi-agent setup guide: consolidated-backend/MULTI_AGENT_SETUP_GUIDE.md"
          echo "   • Messaging connect: consolidated-backend/MESSAGING_CONNECT_README.md"
          echo "   • Frontend setup: consolidated-frontend/README.md"
        shell: bash
        if: always() # Always show summary, even if deployment fails