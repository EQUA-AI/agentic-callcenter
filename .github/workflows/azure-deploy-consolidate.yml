name: Azure Consolidated Deployment

on:
  workflow_dispatch:

# Using federated credentials (user-assigned managed identity) authentication
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    # azd built-in secrets for federated authentication - match original deployment
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
      # OpenAI configuration (shared with original deployment)
      OPENAI_NAME: ${{ secrets.OPENAI_NAME }}
      OPENAI_RESOURCE_GROUP_NAME: ${{ secrets.OPENAI_RESOURCE_GROUP_NAME }}
      EMAIL_RECIPIENT_ADDRESS: ${{ secrets.EMAIL_RECIPIENT_ADDRESS }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # using the install-azd action
      - name: Install azd
        uses: Azure/setup-azd@v2.1.0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Upgrade pip to latest version to avoid warnings
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
        shell: bash

      # Login with federated credentials (managed identity)
      - name: Log in with Azure (Federated Credentials)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Configure azd to use federated credentials from GitHub Actions
      - name: Configure azd for federated credentials
        run: |
          azd config set auth.useAzCliAuth true
        shell: bash

      # Create .env file for azd parameters - match original deployment pattern
      - name: Create .env file for consolidated azd deployment
        run: |
          cat > .env << EOF
          AZURE_ENV_NAME=${{ secrets.AZURE_ENV_NAME }}
          AZURE_LOCATION=${{ secrets.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_PRINCIPAL_ID=${{ secrets.AZURE_PRINCIPAL_ID }}
          AZURE_OPENAI_NAME=${{ secrets.OPENAI_NAME }}
          AZURE_OPENAI_RG=${{ secrets.OPENAI_RESOURCE_GROUP_NAME }}
          EMAIL_RECIPIENT_ADDRESS=${{ secrets.EMAIL_RECIPIENT_ADDRESS }}
          GITHUB_ACTIONS=true
          EOF
        shell: bash

      # Configure consolidated deployment
      - name: Configure consolidated deployment  
        run: |
          # Backup original azure.yaml
          cp azure.yaml azure-original.yaml.backup
          # Use consolidated configuration for this deployment
          cp azure-consolidated.yaml azure.yaml
          # Backup original main.bicep
          cp infra/main.bicep infra/main-original.bicep.backup
          # Update main.bicep to use aca-consolidated instead of aca
          sed 's/module aca '\''\.\/aca\.bicep'\''/module acaConsolidated '\''\.\/aca-consolidated\.bicep'\''/g' infra/main-original.bicep.backup > infra/main.bicep
        shell: bash

      # Deploy using azd - same pattern as original deployment
      - name: Provision Infrastructure and Deploy Consolidated Application
        run: azd up --no-prompt
        shell: bash
        env:
          # Azure credentials for azd to use - match original deployment
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # Infrastructure parameters matching main.parameters.json
          AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
          AZURE_PRINCIPAL_ID: ${{ secrets.AZURE_PRINCIPAL_ID }}
          AZURE_OPENAI_NAME: ${{ secrets.OPENAI_NAME }}
          AZURE_OPENAI_RG: ${{ secrets.OPENAI_RESOURCE_GROUP_NAME }}
          EMAIL_RECIPIENT_ADDRESS: ${{ secrets.EMAIL_RECIPIENT_ADDRESS }}
          GITHUB_ACTIONS: "true"
          # Enable OIDC authentication for azd
          ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
          ACTIONS_ID_TOKEN_REQUEST_URL: ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}
          # uncomment this if you are using infrastructure parameters
          AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ secrets.AZD_INITIAL_ENVIRONMENT_CONFIG }}

      # Get deployment information
      - name: Get consolidated deployment URLs
        run: |
          echo "ðŸ“‹ Consolidated Deployment Information:"
          echo "Environment: ${{ secrets.AZURE_ENV_NAME }}"
          echo "Resource Group: rg-${{ secrets.AZURE_ENV_NAME }}"
          echo ""
          echo "ðŸ”— Application URLs:"
          azd env get-values | grep -E "(BACKEND_URL|FRONTEND_URL)" || echo "URLs will be available after deployment completes"
          echo ""
          echo "ðŸ“Š All Container Apps in Resource Group:"
          az containerapp list --resource-group "rg-${{ secrets.AZURE_ENV_NAME }}" --query "[].{Name:name,Status:properties.provisioningState,FQDN:properties.configuration.ingress.fqdn}" --output table || echo "Container apps will be listed after deployment"
        shell: bash

      # Restore original configuration files
      - name: Restore original configuration files
        run: |
          # Restore original azure.yaml
          if [ -f azure-original.yaml.backup ]; then
            cp azure-original.yaml.backup azure.yaml
            rm azure-original.yaml.backup
          fi
          # Restore original main.bicep
          if [ -f infra/main-original.bicep.backup ]; then
            cp infra/main-original.bicep.backup infra/main.bicep
            rm infra/main-original.bicep.backup
          fi
        shell: bash
        if: always() # Always restore, even if deployment fails